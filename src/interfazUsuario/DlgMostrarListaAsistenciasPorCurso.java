/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfazUsuario;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import org.bson.Document;
import repository.*;

/**
 *
 * @author Alfredo Perez
 */
public class DlgMostrarListaAsistenciasPorCurso extends javax.swing.JDialog {

    private CursosRepository cursosRepository;
    private UnidadesRepository unidadesRepository;
    private AsistenciaCursosRepository asistenciaCursosRepository;
    private List<Document> listaAsistencia;
    
    /**
     * Creates new form DlgMostrarCusosPorUnidad
     * @param parent
     * @param modal
     * @param cursosRepository
     * @param unidadesRepository
     * @param asistenciaCursosRepository
     */
    public DlgMostrarListaAsistenciasPorCurso(java.awt.Frame parent, boolean modal, CursosRepository cursosRepository, UnidadesRepository unidadesRepository, AsistenciaCursosRepository asistenciaCursosRepository) {
        super(parent, modal);
        this.initComponents();
        this.listaAsistencia = new ArrayList<>();
        this.asistenciaCursosRepository = asistenciaCursosRepository;
        this.unidadesRepository = unidadesRepository;
        this.cursosRepository = cursosRepository;
        this.actualizarTablaLista();
        this.llenarComboBoxCursos();
        this.setTitle("Mostrar Lista Asistencias");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        etiquetaTitulo = new javax.swing.JLabel();
        comboBoxCursos = new javax.swing.JComboBox<>();
        etiquetaSeleccionarCurso = new javax.swing.JLabel();
        scrollPanelTablaLista = new javax.swing.JScrollPane();
        tablaLista = new javax.swing.JTable();
        panelBotonSalir = new javax.swing.JPanel();
        botonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelFondo.setBackground(new java.awt.Color(240, 202, 171));
        panelFondo.setPreferredSize(new java.awt.Dimension(973, 626));

        etiquetaTitulo.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        etiquetaTitulo.setText("Lista de asistencias");

        comboBoxCursos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboBoxCursos.setMaximumRowCount(100);
        comboBoxCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar curso" }));
        comboBoxCursos.setBorder(null);
        comboBoxCursos.setPreferredSize(new java.awt.Dimension(600, 29));
        comboBoxCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCursosActionPerformed(evt);
            }
        });

        etiquetaSeleccionarCurso.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarCurso.setText("Seleccionar curso: ");

        tablaLista.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPanelTablaLista.setViewportView(tablaLista);

        panelBotonSalir.setBackground(new java.awt.Color(0, 0, 0));
        panelBotonSalir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelBotonSalir.setPreferredSize(new java.awt.Dimension(80, 30));

        botonSalir.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        botonSalir.setForeground(new java.awt.Color(255, 255, 255));
        botonSalir.setText("Salir");
        botonSalir.setContentAreaFilled(false);
        botonSalir.setPreferredSize(new java.awt.Dimension(80, 30));
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonSalirLayout = new javax.swing.GroupLayout(panelBotonSalir);
        panelBotonSalir.setLayout(panelBotonSalirLayout);
        panelBotonSalirLayout.setHorizontalGroup(
            panelBotonSalirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonSalirLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBotonSalirLayout.setVerticalGroup(
            panelBotonSalirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonSalirLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiquetaTitulo)
                        .addGroup(panelFondoLayout.createSequentialGroup()
                            .addComponent(etiquetaSeleccionarCurso)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panelBotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFondoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(etiquetaTitulo)
                .addGap(25, 25, 25)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaSeleccionarCurso)
                    .addComponent(comboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelBotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCursosActionPerformed
        if(comboBoxCursos.getSelectedIndex() >0)
         {
             extraerListaConListaAsistencias();
         }
         else
         {
             listaAsistencia.clear();
             actualizarTablaLista();
         }
    }//GEN-LAST:event_comboBoxCursosActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
       dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void extraerListaConListaAsistencias()
    {
        List<List<Document>> listaConListaDeAsistencias = new ArrayList<>();
        List<Document> lista = asistenciaCursosRepository.buscarListaAsistenciasPorCurso(extraerCurso());
        if(lista != null)
        {
            for(int cont = 0 ; cont < lista.size() ; cont++)
            {
                listaConListaDeAsistencias.add((List<Document>) lista.get(cont).get("listaAsistencia"));
            }
            contarListaAsistencias(listaConListaDeAsistencias);
        }
         else
         {
             listaAsistencia.clear();
             actualizarTablaLista();
             JOptionPane.showMessageDialog(null, "Error \n No se ha encontrado ningun registro!", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
         }
        
    }
    
    private void contarListaAsistencias(List<List<Document>> listaConListaDeAsistencias)
    {
        listaAsistencia.clear();
        for(int cont = 0 ; cont < listaConListaDeAsistencias.size(); cont++)
        {
            for(int cont2 = 0 ; cont2 < listaConListaDeAsistencias.get(cont).size() ; cont2++)
            {
                Document alumno = new Document();
                alumno.append("nombre", listaConListaDeAsistencias.get(cont).get(cont2).get("nombre"));
                if(listaAsistencia.isEmpty())
                {
                    if(listaConListaDeAsistencias.get(cont).get(cont2).getString("estadoAsistencia").equals("Asistio"))
                    {
                        alumno.append("total asistencias", "1");
                        listaAsistencia.add(alumno);
                    }
                    else
                    {
                        alumno.append("total asistencias", "0");
                        listaAsistencia.add(alumno);
                    }
                }
                else
                {
                    if(listaConListaDeAsistencias.get(cont).get(cont2).getString("estadoAsistencia").equals("Asistio"))
                    {
                        if(comprobarSiYaExisteElEstudiante(listaAsistencia, alumno)==false)
                        {
                            if(listaConListaDeAsistencias.get(cont).get(cont2).getString("estadoAsistencia").equals("Asistio"))
                            {
                                alumno.append("total asistencias", "1");
                                listaAsistencia.add(alumno); 
                            }
                            else
                            {
                                alumno.append("total asistencias", "0");
                                listaAsistencia.add(alumno);
                            }
                        }
                    }
                }
            }
        }
        actualizarTablaLista();
    }
    
    private boolean comprobarSiYaExisteElEstudiante(List<Document>listaAsistencia, Document alumno)
    {
        for(int cont3 = 0 ; cont3 < listaAsistencia.size() ; cont3++)
        {
            if(alumno.get("nombre").equals(listaAsistencia.get(cont3).get("nombre")))
            {
                Integer asistencias = Integer.valueOf(listaAsistencia.get(cont3).get("total asistencias").toString());
                asistencias = (asistencias+1);
                listaAsistencia.get(cont3).replace("total asistencias", String.valueOf(asistencias));
                return true;
            }
        }
        return false;
    }
    
    private void llenarComboBoxCursos()
    {
       List<Document> listaCursos = cursosRepository.buscarRegistrosEnLaColeccion();
       for(int cont=0 ;cont < listaCursos.size() ;cont++)
       {
           comboBoxCursos.addItem("Nombre: "+listaCursos.get(cont).getString("nombre")+
                                ", Periodo: "+listaCursos.get(cont).getString("periodo")+
                                ", Dias: "+listaCursos.get(cont).getString("dias")+
                                ", Hora: "+listaCursos.get(cont).getString("hora"));
       }
    }
    
    private Document extraerCurso()
    {
        String[] curso;
        Document documentoCurso = new Document();
        curso = comboBoxCursos.getSelectedItem().toString().split(",");
        documentoCurso.append("nombre", curso[0].substring(curso[0].indexOf(":")+2, curso[0].length()));
        documentoCurso.append("periodo", curso[1].substring(curso[1].indexOf(":")+2, curso[1].length()));
        documentoCurso.append("dias", curso[2].substring(curso[2].indexOf(":")+2, curso[2].length()));
        documentoCurso.append("hora", curso[3].substring(curso[3].indexOf(":")+2, curso[3].length()));
        return documentoCurso;
    }
    
    private void actualizarTablaLista()
    {
       tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            convertirListaAsistenciaAObjetos(),
            new String [] {
                "Num.","Nombre Completo", "Total asistencias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class,java.lang.String.class, java.lang.String.class
            };
                
            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            boolean[] canEdit = new boolean [] {false, false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); 
            tablaLista.getColumnModel().getColumn(0).setResizable(false);
            tablaLista.getColumnModel().getColumn(1).setResizable(false);
            tablaLista.getColumnModel().getColumn(2).setResizable(false);
            tablaLista.getColumnModel().getColumn(0).setPreferredWidth(1);
            tablaLista.getColumnModel().getColumn(1).setPreferredWidth(300);
    }
    
    private Object[][] convertirListaAsistenciaAObjetos()
    {
        if(!listaAsistencia.isEmpty())
        {
            Object[][] listaAsistenciaObjet = new Object[listaAsistencia.size()][3];
            for(int cont=0 ; cont < listaAsistencia.size() ; cont++)
            {
                listaAsistenciaObjet[cont][0] = String.valueOf(cont+1);
                listaAsistenciaObjet[cont][1] = listaAsistencia.get(cont).getString("nombre");
                listaAsistenciaObjet[cont][2] = listaAsistencia.get(cont).getString("total asistencias");
            }
            return listaAsistenciaObjet;
        }
        return new Object[0][0];
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonSalir;
    private javax.swing.JComboBox<String> comboBoxCursos;
    private javax.swing.JLabel etiquetaSeleccionarCurso;
    private javax.swing.JLabel etiquetaTitulo;
    private javax.swing.JPanel panelBotonSalir;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JScrollPane scrollPanelTablaLista;
    private javax.swing.JTable tablaLista;
    // End of variables declaration//GEN-END:variables
}

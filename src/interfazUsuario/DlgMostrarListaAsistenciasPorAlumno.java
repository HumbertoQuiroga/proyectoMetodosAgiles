/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfazUsuario;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.bson.Document;
import repository.*;

/**
 *
 * @author Alfredo Perez
 */
public class DlgMostrarListaAsistenciasPorAlumno extends javax.swing.JDialog {

    private CursosRepository cursosRepository;
    private UnidadesRepository unidadesRepository;
    private AsistenciaCursosRepository asistenciaCursosRepository;
    private List<Document> listaDatosAlumno;
    
    /**
     * Creates new form DlgMostrarCusosPorUnidad
     * @param parent
     * @param modal
     * @param cursosRepository
     * @param unidadesRepository
     * @param asistenciaCursosRepository
     */
    public DlgMostrarListaAsistenciasPorAlumno(java.awt.Frame parent, boolean modal, CursosRepository cursosRepository, UnidadesRepository unidadesRepository, AsistenciaCursosRepository asistenciaCursosRepository) {
        super(parent, modal);
        this.initComponents();
        this.listaDatosAlumno = new ArrayList<>();
        this.asistenciaCursosRepository = asistenciaCursosRepository;
        this.unidadesRepository = unidadesRepository;
        this.cursosRepository = cursosRepository;
        this.actualizarTablaLista();
        this.llenarComboBoxCursos();
        this.setTitle("Mostrar Lista Asistencias");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        etiquetaTitulo = new javax.swing.JLabel();
        comboBoxCursos = new javax.swing.JComboBox<>();
        etiquetaSeleccionarCurso = new javax.swing.JLabel();
        scrollPanelTablaLista = new javax.swing.JScrollPane();
        tablaLista = new javax.swing.JTable();
        botonSalir = new javax.swing.JButton();
        etiquetaSeleccionarAlumno = new javax.swing.JLabel();
        comboBoxAlumnos = new javax.swing.JComboBox<>();
        etiquetaNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelFondo.setBackground(new java.awt.Color(240, 202, 171));
        panelFondo.setPreferredSize(new java.awt.Dimension(973, 626));

        etiquetaTitulo.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        etiquetaTitulo.setText("Lista de asistencias");

        comboBoxCursos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboBoxCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar curso" }));
        comboBoxCursos.setPreferredSize(new java.awt.Dimension(147, 29));
        comboBoxCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCursosActionPerformed(evt);
            }
        });

        etiquetaSeleccionarCurso.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarCurso.setText("Seleccionar curso: ");

        tablaLista.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPanelTablaLista.setViewportView(tablaLista);

        botonSalir.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        etiquetaSeleccionarAlumno.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarAlumno.setText("Seleccionar alumno: ");

        comboBoxAlumnos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboBoxAlumnos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar alumno" }));
        comboBoxAlumnos.setPreferredSize(new java.awt.Dimension(600, 29));
        comboBoxAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxAlumnosActionPerformed(evt);
            }
        });

        etiquetaNombre.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaNombre.setText("Nombre:");

        txtNombre.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txtNombre.setPreferredSize(new java.awt.Dimension(600, 29));

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botonSalir)
                            .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(etiquetaTitulo))))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(etiquetaNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(etiquetaSeleccionarAlumno)
                                    .addComponent(etiquetaSeleccionarCurso))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxCursos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(etiquetaTitulo)
                .addGap(24, 24, 24)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiquetaSeleccionarCurso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiquetaSeleccionarAlumno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(etiquetaNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonSalir)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCursosActionPerformed
        if(comboBoxCursos.getSelectedIndex() > 0)
        {
            extraerListaAlumnos();
        }
        else
        {
           comboBoxAlumnos.removeAllItems();
           comboBoxAlumnos.addItem("Seleccionar alumno");
        }        
    }//GEN-LAST:event_comboBoxCursosActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void comboBoxAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxAlumnosActionPerformed
      if(comboBoxAlumnos.getSelectedIndex() > 0)
      {
        extraerListaAsistenciasAlumno();
      }
      else
      {
          txtNombre.setText("");
          listaDatosAlumno.clear();
          actualizarTablaLista();
      }
    }//GEN-LAST:event_comboBoxAlumnosActionPerformed

    private void extraerListaAsistenciasAlumno()
    {
        listaDatosAlumno.clear();
        List<Document> listaConAsistenicas = asistenciaCursosRepository.buscarListaAsistenciasPorCurso(extraerCurso());
        if(listaConAsistenicas != null)
        {
            for(int cont =0 ; cont < listaConAsistenicas.size() ; cont++)
            {
                List<Document> listaAsistencia;
                listaAsistencia = (List<Document>)listaConAsistenicas.get(cont).get("listaAsistencia");
                for(int cont2 =0 ; cont2 < listaAsistencia.size() ; cont2++)
                {
                    String nombreAlumno;
                    nombreAlumno = comboBoxAlumnos.getSelectedItem().toString().substring(comboBoxAlumnos.getSelectedItem().toString().indexOf(":")+2, comboBoxAlumnos.getSelectedItem().toString().length());
                    txtNombre.setText(nombreAlumno);
                    if(nombreAlumno.equals(listaAsistencia.get(cont2).getString("nombre")))
                    {
                        Document datosAlumno = new Document();
                        Document datosUnidad = (Document)listaConAsistenicas.get(cont).get("unidad");
                        datosAlumno.append("indiceUnidad",datosUnidad.get("indice"));
                        datosAlumno.append("nombreUnidad",datosUnidad.get("nombre"));
                        datosAlumno.append("fecha", listaConAsistenicas.get(cont).get("fecha"));
                        datosAlumno.append("horaEntrada", listaAsistencia.get(cont2).get("horaEntrada"));
                        datosAlumno.append("minutosTotales", listaAsistencia.get(cont2).get("minutosTotales"));
                        listaDatosAlumno.add(datosAlumno);
                    }
                    
                }
            }
            actualizarTablaLista();
        }
    }
    
    private void extraerListaAlumnos()
    {
        List<Document> listaConAsistenicas = asistenciaCursosRepository.buscarListaAsistenciasPorCurso(extraerCurso());
        if(listaConAsistenicas != null)
        {
            List<List<Document>> listaConListasAsistenicas = new ArrayList<>();
            for(int cont = 0 ; cont < listaConAsistenicas.size() ; cont++)
            {
                listaConListasAsistenicas.add((List<Document>)listaConAsistenicas.get(cont).get("listaAsistencia"));
            }
            llenarComboBoxAlumnos(extrareListaAlumnos(listaConListasAsistenicas));
        }
        else
        {
            comboBoxAlumnos.removeAllItems();
            comboBoxAlumnos.addItem("Seleccionar alumno");
            JOptionPane.showMessageDialog(null, "Error \n No se encontraron registros de asistencias \n en el curso seleccionado.", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private List<Document> extrareListaAlumnos(List<List<Document>> listaConListasAsistenicas)
    {
        List<Document> listaAlumnos = new ArrayList<>();
        for(int cont = 0 ; cont < listaConListasAsistenicas.size() ; cont++)
        {
            for(int cont2 = 0 ; cont2 < listaConListasAsistenicas.get(cont).size() ; cont2++)
            {
                if(listaConListasAsistenicas.get(cont).get(cont2).getString("estadoAsistencia").equals("Asistio"))
                {
                   if(!listaAlumnos.contains(new Document("nombre", listaConListasAsistenicas.get(cont).get(cont2).getString("nombre"))))
                   {
                      listaAlumnos.add(new Document("nombre", listaConListasAsistenicas.get(cont).get(cont2).getString("nombre")));
                   }
                }
            }
        }
        return listaAlumnos;
    }
    
    
    private void llenarComboBoxCursos()
    {
       List<Document> listaCursos = cursosRepository.buscarRegistrosEnLaColeccion();
       for(int cont=0 ;cont < listaCursos.size() ;cont++)
       {
           comboBoxCursos.addItem("Nombre: "+listaCursos.get(cont).getString("nombre")+
                                ", Periodo: "+listaCursos.get(cont).getString("periodo")+
                                ", Dias: "+listaCursos.get(cont).getString("dias")+
                                ", Hora: "+listaCursos.get(cont).getString("hora"));
       }
    }
    
    private void llenarComboBoxAlumnos(List<Document> listaAlumnos)
    {
       comboBoxAlumnos.removeAllItems();
       comboBoxAlumnos.addItem("Seleccionar alumno");
       for(int cont=0 ;cont < listaAlumnos.size() ;cont++)
       {
           comboBoxAlumnos.addItem("Nombre: "+listaAlumnos.get(cont).getString("nombre"));
       }
    }
    
    private Document extraerCurso()
    {
        String[] curso;
        Document documentoCurso = new Document();
        curso = comboBoxCursos.getSelectedItem().toString().split(",");
        documentoCurso.append("nombre", curso[0].substring(curso[0].indexOf(":")+2, curso[0].length()));
        documentoCurso.append("periodo", curso[1].substring(curso[1].indexOf(":")+2, curso[1].length()));
        documentoCurso.append("dias", curso[2].substring(curso[2].indexOf(":")+2, curso[2].length()));
        documentoCurso.append("hora", curso[3].substring(curso[3].indexOf(":")+2, curso[3].length()));
        return documentoCurso;
    }
    
    private void actualizarTablaLista()
    {
       tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            convertirListaAsistenciaAObjetos(),
            new String [] {
                "Indice Unidad", "Nombre Unidad", "Fecha", "Hora Entrada", "Minutos Totales"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
                
            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            boolean[] canEdit = new boolean [] {false, false, false, false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); 
            tablaLista.getColumnModel().getColumn(0).setResizable(false);
            tablaLista.getColumnModel().getColumn(1).setResizable(false);
            tablaLista.getColumnModel().getColumn(2).setResizable(false);
            tablaLista.getColumnModel().getColumn(3).setResizable(false);
            tablaLista.getColumnModel().getColumn(4).setResizable(false);
            tablaLista.getColumnModel().getColumn(0).setPreferredWidth(1);
            tablaLista.getColumnModel().getColumn(1).setPreferredWidth(300);
    }
    
    private Object[][] convertirListaAsistenciaAObjetos()
    {
        if(!listaDatosAlumno.isEmpty())
        {
            Object[][] listaAsistenciaObjet = new Object[listaDatosAlumno.size()][5];
            for(int cont=0 ; cont < listaDatosAlumno.size() ; cont++)
            {
                listaAsistenciaObjet[cont][0] = listaDatosAlumno.get(cont).getString("indiceUnidad");
                listaAsistenciaObjet[cont][1] = listaDatosAlumno.get(cont).getString("nombreUnidad");
                listaAsistenciaObjet[cont][2] = listaDatosAlumno.get(cont).getString("fecha");
                listaAsistenciaObjet[cont][3] = listaDatosAlumno.get(cont).getString("horaEntrada");
                listaAsistenciaObjet[cont][4] = listaDatosAlumno.get(cont).getString("minutosTotales");
            }
            return listaAsistenciaObjet;
        }
        return new Object[0][0];
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonSalir;
    private javax.swing.JComboBox<String> comboBoxAlumnos;
    private javax.swing.JComboBox<String> comboBoxCursos;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel etiquetaSeleccionarAlumno;
    private javax.swing.JLabel etiquetaSeleccionarCurso;
    private javax.swing.JLabel etiquetaTitulo;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JScrollPane scrollPanelTablaLista;
    private javax.swing.JTable tablaLista;
    private javax.swing.JLabel txtNombre;
    // End of variables declaration//GEN-END:variables
}

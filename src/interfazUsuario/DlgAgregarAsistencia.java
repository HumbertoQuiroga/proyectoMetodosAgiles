/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfazUsuario;

import interpreter.Interpreter;
import objetosNegocio.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.bson.Document;
import repository.AsistenciaCursosRepository;
import repository.CursosRepository;
import repository.UnidadesRepository;

/**
 *
 * @author Alfredo Perez
 */
public class DlgAgregarAsistencia extends javax.swing.JDialog 
{
    private Interpreter interpreteArchivo = new Interpreter();;
    private List<String[]> listaContenido;
    private MiRender mirender = new MiRender();
    private AsistenciaCursosRepository asistenciaCursosRepository;
    private CursosRepository cursosRepo;
    private UnidadesRepository unidadesRepository;
    
    /**
     * Creates new form DlgAgregarAsistencia
     * @param parent
     * @param modal
     * @param asistenciaCursosRepository
     * @param cursosRepo
     * @param unidadesRepository
     */
    public DlgAgregarAsistencia(java.awt.Frame parent, boolean modal, AsistenciaCursosRepository asistenciaCursosRepository, CursosRepository cursosRepo, UnidadesRepository unidadesRepository) 
    {
        super(parent, modal);
        this.initComponents();
        this.unidadesRepository = unidadesRepository;
        this.asistenciaCursosRepository = asistenciaCursosRepository;
        this.cursosRepo = cursosRepo;
        this.llenarComboBoxCursos();
        this.listaContenido = new ArrayList<>();
        this.actualizarTablaLista();
        this.tablaLista.setDefaultRenderer(tablaLista.getColumnClass(1) ,mirender);
        this.setTitle("Agregar Asistencia");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondo = new javax.swing.JPanel();
        txtSelectorArchivo = new javax.swing.JTextField();
        etiquetaSeleccionarArchivo = new javax.swing.JLabel();
        botonBuscarArchivo = new javax.swing.JButton();
        etiquetaTitulo = new javax.swing.JLabel();
        scrollPanelTablaLista = new javax.swing.JScrollPane();
        tablaLista = new javax.swing.JTable();
        etiquetaSeleccionarCurso = new javax.swing.JLabel();
        comboBoxCursos = new javax.swing.JComboBox<>();
        etiquetaFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JLabel();
        etiquetaSeleccionarUnidad = new javax.swing.JLabel();
        comboBoxUnidades = new javax.swing.JComboBox<>();
        panelBotonAgregar = new javax.swing.JPanel();
        botonAceptar = new javax.swing.JButton();
        panelBotonCancelar = new javax.swing.JPanel();
        botonCanelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        panelFondo.setBackground(new java.awt.Color(240, 202, 171));

        txtSelectorArchivo.setEditable(false);
        txtSelectorArchivo.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        txtSelectorArchivo.setPreferredSize(new java.awt.Dimension(470, 29));
        txtSelectorArchivo.setRequestFocusEnabled(false);
        txtSelectorArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtSelectorArchivoMousePressed(evt);
            }
        });

        etiquetaSeleccionarArchivo.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarArchivo.setText("Seleccionar archivo: ");

        botonBuscarArchivo.setText("....");
        botonBuscarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarArchivoActionPerformed(evt);
            }
        });

        etiquetaTitulo.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        etiquetaTitulo.setText("Agregar asistencia");

        tablaLista.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scrollPanelTablaLista.setViewportView(tablaLista);

        etiquetaSeleccionarCurso.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarCurso.setText("Seleccionar curso: ");

        comboBoxCursos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboBoxCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar curso" }));
        comboBoxCursos.setPreferredSize(new java.awt.Dimension(141, 29));
        comboBoxCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCursosActionPerformed(evt);
            }
        });

        etiquetaFecha.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        etiquetaFecha.setText("Fecha: ");

        txtFecha.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        etiquetaSeleccionarUnidad.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        etiquetaSeleccionarUnidad.setText("Seleccionar unidad: ");

        comboBoxUnidades.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboBoxUnidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar unidad" }));
        comboBoxUnidades.setPreferredSize(new java.awt.Dimension(155, 29));

        panelBotonAgregar.setBackground(new java.awt.Color(51, 255, 51));
        panelBotonAgregar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelBotonAgregar.setPreferredSize(new java.awt.Dimension(90, 30));

        botonAceptar.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        botonAceptar.setForeground(new java.awt.Color(255, 255, 255));
        botonAceptar.setText("Aceptar");
        botonAceptar.setContentAreaFilled(false);
        botonAceptar.setPreferredSize(new java.awt.Dimension(90, 30));
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonAgregarLayout = new javax.swing.GroupLayout(panelBotonAgregar);
        panelBotonAgregar.setLayout(panelBotonAgregarLayout);
        panelBotonAgregarLayout.setHorizontalGroup(
            panelBotonAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonAgregarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBotonAgregarLayout.setVerticalGroup(
            panelBotonAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonAgregarLayout.createSequentialGroup()
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelBotonCancelar.setBackground(new java.awt.Color(0, 0, 0));
        panelBotonCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelBotonCancelar.setPreferredSize(new java.awt.Dimension(100, 30));

        botonCanelar.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        botonCanelar.setForeground(new java.awt.Color(255, 255, 255));
        botonCanelar.setText("Cancelar");
        botonCanelar.setContentAreaFilled(false);
        botonCanelar.setPreferredSize(new java.awt.Dimension(100, 30));
        botonCanelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCanelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonCancelarLayout = new javax.swing.GroupLayout(panelBotonCancelar);
        panelBotonCancelar.setLayout(panelBotonCancelarLayout);
        panelBotonCancelarLayout.setHorizontalGroup(
            panelBotonCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonCancelarLayout.createSequentialGroup()
                .addComponent(botonCanelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelBotonCancelarLayout.setVerticalGroup(
            panelBotonCancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonCancelarLayout.createSequentialGroup()
                .addComponent(botonCanelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelFondoLayout = new javax.swing.GroupLayout(panelFondo);
        panelFondo.setLayout(panelFondoLayout);
        panelFondoLayout.setHorizontalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addComponent(etiquetaTitulo)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelFondoLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(panelBotonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(panelBotonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(etiquetaSeleccionarArchivo)
                                    .addComponent(etiquetaSeleccionarCurso)
                                    .addComponent(etiquetaSeleccionarUnidad))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSelectorArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxCursos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxUnidades, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonBuscarArchivo))
                            .addGroup(panelFondoLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(etiquetaFecha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(260, Short.MAX_VALUE))))
        );
        panelFondoLayout.setVerticalGroup(
            panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(etiquetaTitulo)
                .addGap(32, 32, 32)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaSeleccionarArchivo)
                    .addComponent(txtSelectorArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaSeleccionarCurso)
                    .addComponent(comboBoxCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaSeleccionarUnidad)
                    .addComponent(comboBoxUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelFondoLayout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(etiquetaFecha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanelTablaLista, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBotonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelBotonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botonBuscarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarArchivoActionPerformed
       File archivo = seleccionarArchivo();
        if(archivo!=null)
        {
            if(comprobarArchivo(archivo.getName()))
            {
                listaContenido.clear();
                listaContenido = interpreteArchivo.importarArchivo(archivo);
                if(listaContenido != null)
                {
                    txtSelectorArchivo.setText(archivo.getPath());
                    txtFecha.setText(convertirFecha(listaContenido.get(0)[0]));
                    actualizarTablaLista();
                }else{JOptionPane.showMessageDialog(this, "Error! \n No se pudo importar el archivo.", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
            }else{JOptionPane.showMessageDialog(this, "Error! \n El tipo de archivo es incorrecto. \n Favor de solo ingresar archivos con la extencion \".CSV\" ", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
        }
    }//GEN-LAST:event_botonBuscarArchivoActionPerformed

    private void botonCanelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCanelarActionPerformed
        dispose();
    }//GEN-LAST:event_botonCanelarActionPerformed

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        if(validarCampos())
        {   
             Document doc = new Document();
             doc.append("curso", extraerCurso());
             doc.append("unidad", extraerUnidad());
             doc.append("fecha", convertirFecha(listaContenido.get(0)[0]));
             doc.append("listaAsistencia", obtenerListaContendioJSON());
             if(comprobarSiElRegistroExiste(extraerCurso(), convertirFecha(listaContenido.get(0)[0])))
             {
                if(asistenciaCursosRepository.agregarDoumento(doc))
                {
                    JOptionPane.showMessageDialog(this, "La asistencia se agrego con exito!", "Mesaje Aviso", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                }else{JOptionPane.showMessageDialog(this, "Error! \n No se pudo agregar la asistencia!", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
             }else{JOptionPane.showMessageDialog(this, "Error! \n Ya hay un registro en la fecha:"+convertirFecha(listaContenido.get(0)[0])+"\n para el curso seleccionado!", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
        }
    }//GEN-LAST:event_botonAceptarActionPerformed

    private boolean validarCampos()
    {
       if(listaContenido.isEmpty())
       {
           JOptionPane.showMessageDialog(this, "Error! \n No se ha abierto ningun documento con contenido", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
           return false;
       }
       else if(comboBoxCursos.getSelectedItem().equals("Seleccionar curso"))
       {
           JOptionPane.showMessageDialog(this, "Error! \n No se ha seleccionado ningun curso", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
           return false;
       }
       else if(comboBoxUnidades.getSelectedItem().equals("Seleccionar unidad"))
       {
           JOptionPane.showMessageDialog(this, "Error! \n No se ha seleccionado ninguna unidad", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
           return false;
       }
       return true;    
    }
    
    private void txtSelectorArchivoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSelectorArchivoMousePressed
        File archivo = seleccionarArchivo();
        if(archivo!=null)
        {
            if(comprobarArchivo(archivo.getName()))
            {
                listaContenido.clear();
                listaContenido = interpreteArchivo.importarArchivo(archivo);
                if(listaContenido != null)
                {
                    txtSelectorArchivo.setText(archivo.getPath());
                    txtFecha.setText(convertirFecha(listaContenido.get(0)[0]));
                    actualizarTablaLista();
                }else{JOptionPane.showMessageDialog(this, "Error! \n No se pudo importar el archivo.", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
            }else{JOptionPane.showMessageDialog(this, "Error! \n El tipo de archivo es incorrecto. \n Favor de solo ingresar archivos con la extencion \".CSV\" ", "Mensaje Error", JOptionPane.ERROR_MESSAGE);}
        }
    }//GEN-LAST:event_txtSelectorArchivoMousePressed

    private void comboBoxCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCursosActionPerformed
        if(comboBoxCursos.getSelectedIndex()!=0)
        {
            List<Document> listaUnidades = unidadesRepository.buscarUnidades(extraerCurso());
            
            if(listaUnidades != null)
            {
               llenarComboBoxUnidades(listaUnidades);
            }
            else
            {
                comboBoxUnidades.removeAllItems();
                comboBoxUnidades.addItem("Seleccionar unidad");
               JOptionPane.showMessageDialog(null, "Error \n No se ha encontrado ninguna unidad registrada para este curso!", "Mensaje Error", JOptionPane.ERROR_MESSAGE);
            
            }
        }
        else
        {
            comboBoxUnidades.removeAllItems();
            comboBoxUnidades.addItem("Seleccionar unidad");
        }
    }//GEN-LAST:event_comboBoxCursosActionPerformed

    private boolean comprobarSiElRegistroExiste(Document documento, String fecha)
    {
        return asistenciaCursosRepository.buscarListaAsistencias(documento, fecha) == null;
    }
    
    private Document extraerCurso()
    {
        String[] curso;
        Document documentoCurso = new Document();
        curso = comboBoxCursos.getSelectedItem().toString().split(",");
        documentoCurso.append("nombre", curso[0].substring(curso[0].indexOf(":")+2, curso[0].length()));
        documentoCurso.append("periodo", curso[1].substring(curso[1].indexOf(":")+2, curso[1].length()));
        documentoCurso.append("dias", curso[2].substring(curso[2].indexOf(":")+2, curso[2].length()));
        documentoCurso.append("hora", curso[3].substring(curso[3].indexOf(":")+2, curso[3].length()));
        return documentoCurso;
    }
    
    private Document extraerUnidad()
    {
        String[] unidad;
        Document documentoUnidad = new Document();
        unidad = comboBoxUnidades.getSelectedItem().toString().split(",");
        documentoUnidad.append("indice", unidad[0].substring(unidad[0].indexOf(":")+2, unidad[0].length()));
        documentoUnidad.append("nombre", unidad[1].substring(unidad[1].indexOf(":")+2, unidad[1].length()));
        documentoUnidad.append("descripcion", unidad[2].substring(unidad[2].indexOf(":")+2, unidad[2].length()));
        return documentoUnidad;
    }
    
    private String convertirFecha(String fecha)
    {
        String[] arregloFecha;
        //Dia[2]/Mes[1]/Año[0]
        arregloFecha = fecha.split("-");
        return arregloFecha[2]+"/"+arregloFecha[1]+"/"+arregloFecha[0];
    }
    
    private List<Document> obtenerListaContendioJSON()
    {
        List<Document> listaContenidoJSON = new ArrayList<>();
        for(int cont =1;cont < listaContenido.size() ; cont++)
        {
           Document documento = new Document();
           documento.append("nombre", listaContenido.get(cont)[0]);
           documento.append("estadoAsistencia", listaContenido.get(cont)[1]);
           documento.append("horaEntrada", listaContenido.get(cont)[2]);
           documento.append("minutosTotales", listaContenido.get(cont)[3]);
           listaContenidoJSON.add(documento);
        }
        return listaContenidoJSON;
    }
    
    private boolean comprobarArchivo(String nombreArchivo)
    {
        return nombreArchivo.substring(nombreArchivo.indexOf("."), nombreArchivo.length()).equals(".csv");
    }
    
    private Object[][] comprobarLista()
    {
        if(listaContenido.isEmpty()) {return new Object[0][0];}
        else{return interpreteArchivo.getConteridoTabla(listaContenido);}
    }
    
    private void actualizarTablaLista()
    {
       tablaLista.setModel(new javax.swing.table.DefaultTableModel(
            comprobarLista(),
            new String []{"Num.","Nombre Completo", "Estado asistencia", "Hora entrada", "Minutos totales"}
        ) {
            Class[] types = new Class [] {
                java.lang.String.class,java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
                
            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            boolean[] canEdit = new boolean [] {false, false, false, false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }); 
            tablaLista.getColumnModel().getColumn(0).setResizable(false);
            tablaLista.getColumnModel().getColumn(1).setResizable(false);
            tablaLista.getColumnModel().getColumn(2).setResizable(false);
            tablaLista.getColumnModel().getColumn(3).setResizable(false);
            tablaLista.getColumnModel().getColumn(4).setResizable(false);
            tablaLista.getColumnModel().getColumn(0).setPreferredWidth(1);
            tablaLista.getColumnModel().getColumn(1).setPreferredWidth(300);
    }
    
    
    private File seleccionarArchivo()
    {
        JFileChooser selectorArchivos = new JFileChooser();
        
        selectorArchivos.setFileFilter(new FileNameExtensionFilter(".csv", "csv"));
        
        int opcion = selectorArchivos.showOpenDialog(this);
        
        if(opcion ==JFileChooser.APPROVE_OPTION)
        {
            File archivo = selectorArchivos.getSelectedFile();
            return archivo;
        }else{return null;}
    }
    
    private void llenarComboBoxUnidades(List<Document> listaUnidades)
    {
       comboBoxUnidades.removeAllItems();
       comboBoxUnidades.addItem("Seleccionar unidad");
       
        System.out.println("Prueba_"+listaUnidades.size());
       
       Object[][] unidadesObj = new Object[listaUnidades.size()][3];
        for(int cont=0; cont < listaUnidades.size() ;cont++)
        {
            int indice = Integer.valueOf(listaUnidades.get(cont).getString("indice"));
            int pos=0;
            for(int cont2=0 ; cont2 < listaUnidades.size() ;cont2++)
            {
                int indice2 = Integer.valueOf(listaUnidades.get(cont2).getString("indice"));
                if(indice != indice2)
                {
                    if(indice > indice2)
                    {
                        pos = pos+1;
                    }
                }
            }
            unidadesObj[pos][0] = listaUnidades.get(cont).getString("indice");
            unidadesObj[pos][1] = listaUnidades.get(cont).getString("nombre");
            unidadesObj[pos][2] = listaUnidades.get(cont).getString("descripcion");
        }
       for(int cont=0 ;cont < listaUnidades.size() ;cont++)
       {
           comboBoxUnidades.addItem("Indice: "+unidadesObj[cont][0]+
                                ", Nombre: "+unidadesObj[cont][1]+
                                ", Descripcion: "+unidadesObj[cont][2]);
       }
    }
    
    
    private void llenarComboBoxCursos()
    {
       List<Document> listaCursos = cursosRepo.buscarRegistrosEnLaColeccion();
       for(int cont=0 ;cont < listaCursos.size() ;cont++)
       {
           comboBoxCursos.addItem("Nombre: "+listaCursos.get(cont).getString("nombre")+
                                ", Periodo: "+listaCursos.get(cont).getString("periodo")+
                                ", Dias: "+listaCursos.get(cont).getString("dias")+
                                ", Hora: "+listaCursos.get(cont).getString("hora"));
       }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JButton botonBuscarArchivo;
    private javax.swing.JButton botonCanelar;
    private javax.swing.JComboBox<String> comboBoxCursos;
    private javax.swing.JComboBox<String> comboBoxUnidades;
    private javax.swing.JLabel etiquetaFecha;
    private javax.swing.JLabel etiquetaSeleccionarArchivo;
    private javax.swing.JLabel etiquetaSeleccionarCurso;
    private javax.swing.JLabel etiquetaSeleccionarUnidad;
    private javax.swing.JLabel etiquetaTitulo;
    private javax.swing.JPanel panelBotonAgregar;
    private javax.swing.JPanel panelBotonCancelar;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JScrollPane scrollPanelTablaLista;
    private javax.swing.JTable tablaLista;
    private javax.swing.JLabel txtFecha;
    private javax.swing.JTextField txtSelectorArchivo;
    // End of variables declaration//GEN-END:variables

    
   
}
